<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FolkerKinzel.Strings</name>
    </assembly>
    <members>
        <member name="T:FolkerKinzel.Strings.HashType">
            <summary>
            Benannte Konstanten, um die Art eines String-Hashcodes festzulegen.
            </summary>
        </member>
        <member name="F:FolkerKinzel.Strings.HashType.Ordinal">
            <summary>
            Ordinalvergleich der Zeichen
            </summary>
        </member>
        <member name="F:FolkerKinzel.Strings.HashType.OrdinalIgnoreCase">
            <summary>
            Ordinalvergleich der Zeichen ohne Berücksichtigung der Groß- und Kleinschreibung.
            </summary>
        </member>
        <member name="F:FolkerKinzel.Strings.HashType.AlphaNumericNoCase">
            <summary>
            Nur Buchstaben und Ziffern werden gehasht. Die Groß- und Kleinschreibung wird nicht berücksichtigt.
            </summary>
        </member>
        <member name="M:FolkerKinzel.Strings.StringBuilderExtensions.GetStableHashCode(System.Text.StringBuilder,FolkerKinzel.Strings.HashType)">
            <summary>
            Gibt bei jedem Aufruf denselben Hashcode für einen identischen <see cref="T:System.Text.StringBuilder"/> zurück. 
            Erzeugt den identischen Hash wie <see cref="M:FolkerKinzel.Strings.StringExtensions.GetStableHashCode(System.String,FolkerKinzel.Strings.HashType)"/>.
            </summary>
            <param name="sb">Der zu hashende <see cref="T:System.Text.StringBuilder"/>.</param>
            <param name="hashType">Die Art des zu erzeugenden Hashcodes.</param>
            <returns>Der Hashcode für <paramref name="sb"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="sb"/> ist <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="hashType"/> ist kein definierter Wert der <see cref="T:FolkerKinzel.Strings.HashType"/>-Enum.</exception>
        </member>
        <member name="M:FolkerKinzel.Strings.StringBuilderExtensions.GetHashCodeOrdinal(System.Text.StringBuilder)">
            <summary>
            Erzeugt einen Hashcode mit exaktem Zeichenvergleich.
            </summary>
            <param name="str">Der zu hashende <see cref="T:System.String"/>.</param>
            <returns>Der Hashcode.</returns>
        </member>
        <member name="M:FolkerKinzel.Strings.StringBuilderExtensions.GetHashCodeOrdinalIgnoreCase(System.Text.StringBuilder)">
            <summary>
            Erzeugt einen Hashcode, der die Groß- und Kleinschreibung unberücksichtigt lässt.
            </summary>
            <param name="str">Der zu hashende <see cref="T:System.String"/>.</param>
            <returns>Der Hashcode.</returns>
        </member>
        <member name="T:FolkerKinzel.Strings.StringExtensions">
            <summary>
            Erweiterungsmethoden für die <see cref="T:System.String"/>-Klasse.
            </summary>
        </member>
        <member name="M:FolkerKinzel.Strings.StringExtensions.GetStableHashCode(System.String,FolkerKinzel.Strings.HashType)">
            <summary>
            Gibt bei jedem Aufruf denselben Hashcode für einen identischen <see cref="T:System.String"/> zurück.
            </summary>
            <param name="s">Der zu hashende <see cref="T:System.String"/>.</param>
            <param name="hashType">Die Art des zu erzeugenden Hashcodes.</param>
            <returns>Der Hashcode für <paramref name="s"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="s"/> ist <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="hashType"/> ist kein definierter Wert der <see cref="T:FolkerKinzel.Strings.HashType"/>-Enum.</exception>
        </member>
        <member name="M:FolkerKinzel.Strings.StringExtensions.GetHashCodeOrdinal(System.String)">
            <summary>
            Erzeugt einen Hashcode mit exaktem Zeichenvergleich.
            </summary>
            <param name="str">Der zu hashende <see cref="T:System.String"/>.</param>
            <returns>Der Hashcode.</returns>
        </member>
        <member name="M:FolkerKinzel.Strings.StringExtensions.GetHashCodeOrdinalIgnoreCase(System.String)">
            <summary>
            Erzeugt einen Hashcode, der die Groß- und Kleinschreibung unberücksichtigt lässt.
            </summary>
            <param name="str">Der zu hashende <see cref="T:System.String"/>.</param>
            <returns>Der Hashcode.</returns>
        </member>
    </members>
</doc>
