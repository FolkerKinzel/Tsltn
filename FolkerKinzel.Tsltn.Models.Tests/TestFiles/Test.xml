<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FolkerKinzel.CsvTools</name>
    </assembly>
    <members>
        <member name="F:FolkerKinzel.CsvTools.CsvOptions.ThrowOnTooMuchFields">
            <summary>
            Wenn gesetzt, wirft <see cref="T:FolkerKinzel.CsvTools.CsvReader"/> eine <see cref="T:FolkerKinzel.CsvTools.InvalidCsvException"/>, wenn in einer Datenzeile mehr
            Felder enthalten sind, als in der ersten Datenzeile.
            <note>
            Wenn in einer Datenzeile mehr
            Felder enthalten sind, als in der ersten Datenzeile, ist das ein starkes Indiz für einen Lesefehler. Das Flag sollte
            deshalb i.d.R. gesetzt sein.
            </note>
            </summary>
            <example>
            Some Text.
            <code language="cs">First Codeblock.</code>
            Another Text.
            <code language="cs">Second Codeblock</code>
            </example>
        </member>
      <member name="M:FolkerKinzel.CsvTools.Extensions.CsvOptionsExtensions.IsSet(FolkerKinzel.CsvTools.CsvOptions,FolkerKinzel.CsvTools.CsvOptions)">
        <summary>
          Untersucht, ob sämtliche in <paramref name="flags"/> gesetzten Flags auch in <paramref name="value"/>
          gesetzt sind.
        </summary>
        <param name="value">
          Der <see cref="T:FolkerKinzel.CsvTools.CsvOptions"/>?-Wert, der daraufhin überprüft wird, ob sämtliche in <paramref name="flags"/> gesetzten
          Flags auf ihm gesetzt sind.
        </param>
        <param name="flags">
          Ein einzelner <see cref="T:FolkerKinzel.CsvTools.CsvOptions"/>-Wert oder eine Kombination aus mehreren
          <see cref="T:FolkerKinzel.CsvTools.CsvOptions"/>-Werten.
        </param>
        <returns>
          True, wenn sämtliche in <paramref name="flags"/> gesetzten Flags auch in <paramref name="value"/>
          gesetzt sind. (Wenn <paramref name="flags"/>&#160;<see cref="F:FolkerKinzel.CsvTools.CsvOptions.None"/> ist, wird nur dann true zurückgegeben,
          wenn auch <paramref name="value"/>&#160;<see cref="F:FolkerKinzel.CsvTools.CsvOptions.None"/> ist.
        </returns>
      </member>
        <member name="T:FolkerKinzel.CsvTools.CsvReader">
            <summary>
            Bietet schreibgeschützten Vorwärtszugriff auf die Datensätze einer CSV-Datei. (Das bedeutet, dass der <see cref="T:FolkerKinzel.CsvTools.CsvReader"/> die Datei nur einmal vorwärts
            lesen kann.) Da die Ergebnisse zwischengespeichert werden, ist es möglich, eine Linq-Abfrage auf der CSV-Datei
            auszuführen. Wenn Linq nicht benötigt wird, kann das Caching über <see cref="F:FolkerKinzel.CsvTools.CsvOptions.DisableCaching"/> deaktiviert werden.
            </summary>
            <remarks>Die Methode <see cref="M:FolkerKinzel.CsvTools.CsvReader.Read"/> gibt einen <see cref="T:System.Collections.Generic.IEnumerator`1"/> zurück, mit dem Sie über die Datensätze der CSV-Datei iterieren
            können, die in Form von <see cref="T:FolkerKinzel.CsvTools.CsvRecord"/>-Objekten zurückgegeben werden. Die Klasse <see cref="T:FolkerKinzel.CsvTools.Helpers.CsvRecordWrapper"/> bietet die
            Möglichkeit, die Reihenfolge der Datenspalten der <see cref="T:FolkerKinzel.CsvTools.CsvRecord"/>-Objekte zur Laufzeit auf die Spaltenreihenfolge Ihrer <see cref="T:System.Data.DataTable"/>
            zu mappen und Typkonvertierungen durchzuführen.</remarks>
        </member>
        <member name="M:FolkerKinzel.CsvTools.CsvReader.#ctor(System.String,System.Boolean,FolkerKinzel.CsvTools.CsvOptions,System.Text.Encoding,System.Char)">
            <summary>
            Initialisiert ein neues <see cref="T:FolkerKinzel.CsvTools.CsvReader"/>-Objekt.
            </summary>
            <param name="fileName">Dateipfad der CSV-Datei.</param>
            <param name="fieldSeparator">Das Feldtrennzeichen, das in der CSV-Datei Verwendung findet.</param>
            <param name="hasHeaderRow">True, wenn die CSV-Datei eine Kopfzeile mit den Spaltennamen hat.</param>
            <param name="options">Optionen für das Lesen der CSV-Datei.</param>
            <param name="textEncoding">Die zum Einlesen der CSV-Datei zu verwendende Textenkodierung oder <c>null</c> für <see cref="P:System.Text.Encoding.UTF8"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="fileName"/> ist <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="fileName"/> ist kein gültiger Dateipfad.</exception>
            <exception cref="T:System.IO.IOException">Es kann nicht auf den Datenträger zugegriffen werden.</exception>
        </member>
        <member name="T:FolkerKinzel.CsvTools.CsvWriter">
            <summary>
            Die Klasse ermöglicht es, Daten in eine CSV-Datei zu schreiben.
            </summary>
            <remarks><see cref="T:FolkerKinzel.CsvTools.CsvWriter"/> stellt in der Eigenschaft <see cref="P:FolkerKinzel.CsvTools.CsvWriter.Record"/> ein <see cref="T:FolkerKinzel.CsvTools.CsvRecord"/>-Objekt zur Verfügung das einen
            Puffer für einen Datensatz (Zeile) der CSV-Datei repräsentiert. Füllen Sie das <see cref="T:FolkerKinzel.CsvTools.CsvRecord"/>-Objekt mit <see cref="T:System.String"/>-Daten und schreiben
            Sie es anschließend mit der Methode <see cref="M:FolkerKinzel.CsvTools.CsvWriter.WriteRecord"/> in die Datei. Der Aufruf von <see cref="M:FolkerKinzel.CsvTools.CsvWriter.WriteRecord"/> setzt alle Felder von
            <see cref="P:FolkerKinzel.CsvTools.CsvWriter.Record"/> wieder auf <c>null</c>-Werte, so dass der Datensatz erneut befüllt werden kann. Wenn andere Datentypen als <see cref="T:System.String"/>
            geschrieben werden sollen, bietet sich die Verwendung der Klasse <see cref="T:FolkerKinzel.CsvTools.Helpers.CsvRecordWrapper"/> an, die einen komfortablen Adapter zwischen den
            Daten der Anwendung und der CSV-Datei darstellt.</remarks>
        </member>
        <member name="M:FolkerKinzel.CsvTools.Helpers.Converters.Intls.EnumConverter`1.#ctor(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initialisiert ein <see cref="T:FolkerKinzel.CsvTools.Helpers.Converters.Intls.EnumConverter`1"/>-Objekt.
            </summary>
            <param name="format">Ein Formatstring, der für die <see cref="T:System.String"/>-Ausgabe von <typeparamref name="TEnum"/> verwendet wird.</param>
            <param name="nullable">Wenn <c>true</c>, wird <see cref="T:System.Nullable`1"/> akzeptiert und zurückgegeben,
            sonst <typeparamref name="TEnum"/>.</param>
            <param name="maybeDBNull">Wenn true, wird <see cref="F:System.DBNull.Value"/> als Eingabe akzeptiert und bildet auch den
            Rückgabewert von <see cref="P:FolkerKinzel.CsvTools.Helpers.Converters.Intls.EnumConverter`1.FallbackValue"/>.</param>
            <param name="throwOnParseErrors">Wenn true, wirft die Methode <see cref="M:FolkerKinzel.CsvTools.Helpers.Converters.Intls.EnumConverter`1.Parse(System.String)"/> eine Ausnahme, wenn das Parsen misslingt,
            anderenfalls gibt sie in diesem Fall <see cref="P:FolkerKinzel.CsvTools.Helpers.Converters.Intls.EnumConverter`1.FallbackValue"/> zurück.</param>
            <param name="ignoreCase">True gibt an, das beim Parsen die Groß- und Kleinschreibung von Enum-Bezeichnern ignoriert wird.</param>
            <exception cref="T:System.ArgumentException"><paramref name="format"/> ist kein gültiger Formatstring.</exception>
        </member>
        <member name="M:FolkerKinzel.CsvTools.Helpers.Converters.Specialized.DateTimeConverter.#ctor(System.Boolean,System.Boolean,System.Boolean,System.IFormatProvider,System.Boolean)">
            <summary>
            Initialisiert ein <see cref="T:FolkerKinzel.CsvTools.Helpers.Converters.Specialized.DateTimeConverter"/>-Objekt.
            </summary>
            <param name="isDate">Wenn <c>true</c>, wird nur der Datumsteil gelesen und ausgegeben.</param>
            <param name="nullable">Wenn <c>true</c>, wird <see cref="T:System.Nullable`1">Nullable&lt;DateTime&gt;</see> akzeptiert und zurückgegeben,
            sonst <see cref="T:System.DateTime"/>.</param>
            <param name="maybeDBNull">Wenn true, wird <see cref="F:System.DBNull.Value"/> als Eingabe akzeptiert und bildet auch den
            Rückgabewert von <see cref="P:FolkerKinzel.CsvTools.Helpers.Converters.Specialized.DateTimeConverter.FallbackValue"/>.</param>
            <param name="formatProvider">Ein <see cref="T:System.IFormatProvider"/>-Objekt, das kulturspezifische Formatierungsinformationen
            bereitstellt oder <c>null</c> für <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.</param>
            <param name="throwOnParseErrors">Wenn <c>true</c>, wirft die Methode <see cref="M:FolkerKinzel.CsvTools.Helpers.Converters.Specialized.DateTimeConverter.Parse(System.String)"/> eine Ausnahme, wenn das Parsen misslingt,
            anderenfalls gibt sie in diesem Fall <see cref="P:FolkerKinzel.CsvTools.Helpers.Converters.Specialized.DateTimeConverter.FallbackValue"/> zurück.</param> 
            <param name="styles">Ein Wert der <see cref="T:System.Globalization.DateTimeStyles"/>-Enum, der zusätzliche Informationen für das Parsen bereitstellt. Wird
            nur ausgewertet, wenn <paramref name="parseExact"/> true ist.</param>
            <param name="parseExact">Wenn true, muss der Text in der CSV-Datei exakt dem mit <paramref name="format"/> angegebenen
            Formatstring entsprechen.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="format"/> ist <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="format"/> ist kein gültiger Formatstring.</exception>
            <remarks>
            <para>
            Sie können diesen Konstruktor nicht direkt aufrufen, sondern über 
            <see cref="M:FolkerKinzel.CsvTools.Helpers.Converters.CsvConverterFactory.CreateConverter(FolkerKinzel.CsvTools.Helpers.Converters.CsvTypeCode,System.Boolean,System.Boolean,System.IFormatProvider,System.Boolean)"/>.
            </para>
            <para>
            Diese Überladung des Konstruktors ist wesentlich performanter als
            <see cref="!:DateTimeOffsetConverter.DateTimeConverter(string, bool, bool, IFormatProvider, bool, DateTimeStyles, bool)"/>, bietet
            aber weniger Einstellmöglichkeiten. Beim Parsen kommt
            <see cref="M:System.DateTimeOffset.Parse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)"/> zum Einsatz. Der <see cref="T:System.Globalization.DateTimeStyles"/>-Wert ist so
            eingestellt, dass Leerraum ignoriert wird (<see cref="F:System.Globalization.DateTimeStyles.AllowWhiteSpaces"/>).
            </para></remarks>
        </member>
        
        <member name="T:FolkerKinzel.CsvTools.Helpers.CsvRecordWrapper.PropertyCollection">
            ////////////////////////////////////////////////////////////////////////
        </member>
        <member name="T:FolkerKinzel.CsvTools.Resources.Res">
            <summary>
              Eine stark typisierte Ressourcenklasse zum Suchen von lokalisierten Zeichenfolgen usw.
            </summary>
        </member>
        <member name="P:FolkerKinzel.CsvTools.Resources.Res.ResourceManager">
            <summary>
              Gibt die zwischengespeicherte ResourceManager-Instanz zurück, die von dieser Klasse verwendet wird.
            </summary>
        </member>
    </members>
</doc>
